# The base Makefile sets a bunch of useful defaults, provides:
#
# - info.platform
# - info.location
# - do
# - print
# - printv
#
include /usr/src/Makefile.docker

# Build environment.
CI ?= false
CIRCLECI ?= false

# The runtime information.
info.version := $(shell go version | sed 's/^go version //g')

# The options to each of the go comands, set to useful defaults but they can be
# overwritten if necessary.
go.env.args ?=
go.get.args ?= -t -d -v
go.vet.args ?=
go.test.args ?= -v -cover -race
go.bench.args ?= -v
go.build.args ?=
go.build.target ?= .

# The default values for each go command used by this makefile, they can be
# overwritten if necessary.
go.env ?= go env $(go.env.args)
go.get ?= go get $(go.get.args) ./...
go.vet ?= govendor vet $(go.vet.args) +local
go.test ?= govendor test $(go.test.args) +local
go.bench ?= govendor test -run=_ -bench . $(go.bench.args) +local
go.build ?= go build $(go.build.args) $(go.build.target)
gv.sync ?= govendor sync

# The `all` target defines the list of targets that are executed by default.
# The default behavior is to run all high-level build targets.
all: info env get vet test bench build

env:
	@$(call do,$(go.env))

info:
	@$(call print,info)
	@$(call printv,Platform,$(info.platform))
	@$(call printv,Location,$(info.location))
	@$(call printv,Version,$(info.version))
	@$(call printv,CI,$(CI))
	@$(call printv,Circle,$(CIRCLECI))
	@$(call printv,go.env,$(go.env))
	@$(call printv,go.vet,$(go.vet))
	@$(call printv,go.get,$(go.get))
	@$(call printv,go.test,$(go.test))
	@$(call printv,go.bench,$(go.bench))
	@$(call printv,go.build,$(go.build))

get: git.submodule.update govendor.sync
	@$(call do,$(go.get))

vet:
	-@$(call do,$(go.vet))

test: get test.setup
	@function teardown { $(MAKE) -f /usr/src/Makefile.golang --no-print-directory test.teardown; }; \
	trap teardown EXIT; \
	$(call do,$(go.test))

bench: get test.setup
	@function teardown { $(MAKE) -f /usr/src/Makefile.golang --no-print-directory test.teardown; }; \
	trap teardown EXIT; \
	@$(call do,$(go.bench))

build: get
	@$(call do,$(go.build))

# If no docker-compose file exists the `setup` target is defined to do nothing.
ifeq ($(wildcard docker-compose.*),)
test.setup:
	@true
test.teardown:
	@true
else
test.setup: docker.compose.up
test.teardown: docker.compose.down
endif

# The default target does nothing but can be overridden if this Makefile is
# included by other images that are based off of this one.
docker.login:
	@true

docker.compose.up: docker.login
	@$(call do,docker-compose up -d)

docker.compose.down:
	@$(call do,docker-compose down)

# When a .gitmodules file exists we pull all git submodules recursively to make
# sure we have all the dependencies we need to run tests and build.
ifeq ($(wildcard .gitmodules),)
git.submodule.update:
	@true
else
git.submodule.update:
	@$(call do,git submodule update --init --recursive)
endif

# When a vendor/vendor.json file exists we run `govendor sync` to make sure we
# have all the dependencies we need to run tests and build.
ifeq ($(wildcard vendor/vendor.json),)
govendor.sync:
	@true
else
govendor.sync:
	@$(call do,$(gv.sync))
endif

.PHONY: \
	all \
	env \
	info \
	vet \
	get \
	test \
	bench \
	build \
	publish \
	test.setup \
	test.teardown \
	docker.compose.up \
	docker.compose.down \
	git.submodule.update \
	govendor.sync
