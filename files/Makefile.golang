x# The base Makefile sets a bunch of useful defaults.
include /usr/src/Makefile.docker

# The go compiler.
GO ?= go

# Build environment.
CI ?= false
CIRCLECI ?= false

# The runtime information.
info.version := $(shell $(GO) version | sed 's/^go version //g')

# The list of go packages to run the commands against.
go.packages ?= . $(shell ls -d */ 2> /dev/null | grep -v vendor | sed s/^/.\\//g | sed s/$$/.../g)

# The options to each of the go comands, set to useful defaults but they can be
# overwritten if necessary.
go.env.args ?=
go.vet.args ?= $(go.packages)
go.get.args ?= -t -d -v $(go.packages)
go.test.args ?= -v -race $(go.packages)
go.bench.args ?= -v $(go.packages)
go.build.args ?= .

# The default values for each go command used by this makefile, they can be
# overwritten if necessary.
go.env ?= $(GO) env $(go.env.args)
go.get ?= $(GO) get $(go.get.args)
go.vet ?= $(GO) vet $(go.vet.args)
go.test ?= $(GO) test $(go.test.args)
go.bench ?= $(GO) test -run=_ -bench . $(go.bench.args)
go.build ?= $(GO) build $(go.build.args)

# The `all` target defines the list of targets that are executed by default.
# The default behavior is to run all high-level build targets.
all: info env vet get test bench build

env:
	@$(call do,$(go.env))

info:
	@$(call print,info)
	@$(call printv,Platform,$(info.platform))
	@$(call printv,Location,$(info.location))
	@$(call printv,Version,$(info.version))
	@$(call printv,CI,$(CI))
	@$(call printv,Circle,$(CIRCLECI))
	@$(call printv,go.env,$(go.env))
	@$(call printv,go.vet,$(go.vet))
	@$(call printv,go.get,$(go.get))
	@$(call printv,go.test,$(go.test))
	@$(call printv,go.bench,$(go.bench))
	@$(call printv,go.build,$(go.build))

vet:
	-@$(call do,$(go.vet))

get: govendor.sync
	@$(call do,$(go.get))

test: get test.setup
	@function teardown { $(MAKE) -f /usr/src/Makefile.golang --no-print-directory test.teardown; }; \
	trap teardown EXIT; \
	$(call do,$(go.test))

bench: get
	@$(call do,$(go.bench))

build: get
	@$(call do,$(go.build))

# If no docker-compose file exists the `setup` target is defined to do nothing.
ifeq ($(wildcard docker-compose.*),)
test.setup:
	@true
test.teardown:
	@true
else
test.setup: docker.compose.up
test.teardown: docker.compose.down
endif

docker.compose.up:
	@$(call do,docker-compose up -d)

docker.compose.down:
	@$(call do,docker-compose down)

govendor.sync: git.submodules
	@$(call do,govendor -v sync)

git.submodules:
	@$(call do,git submodule update --init --recursive)

.PHONY: \
	all \
	env \
	info \
	vet \
	get \
	test \
	bench \
	build \
	publish \
	test.setup \
	test.teardown \
	docker.compose.up \
	docker.compose.down \
	govendor.sync \
	git.submodules
